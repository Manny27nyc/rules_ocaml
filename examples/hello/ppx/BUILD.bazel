# To build, from examples/ run: $ bazel build //hello/ppx:ppx
# You can shorten //hello/ppx:ppx to hello/ppx
# To run: $ bazel run hello/ppx
# You can also build the other steps, separately:
# $ bazel build hello/ppx:ppx_pipeline
# $ bazel build hello/ppx:preproc

# Bazel will print a message telling you where to find the output of
# each build, so you can compare the original source to the preprocessed
# source (in this case: bazel-bin/hello/ppx/_pp_/hello_ppx.ml).

load("@obazl//ocaml:build.bzl",
     "ocaml_preproc", # macro
     "ocaml_binary", "ocaml_ppx_pipeline" # rules
)

# Step 1: compile the ppx pipeline.
ocaml_ppx_pipeline(
    name = "ppx_pipeline",
    srcs = ["@obazl//ppxlib:driver_standalone_shim"], # <= REQUIRED for ppx pipeline
    opts = ["-strict-sequence",
            "-strict-formats",
            "-short-paths",
            "-keep-locs",
            "-g",
            "-predicates", "ppx_deriving",
            "-predicates", "ppx_driver",
            "-linkpkg",
            "-verbose",
    ],
    deps = ["@opam//pkg:ppx_jane"]
)

# Step 2: use pipeline from step 1 (":ppx_pipeline") to preprocess source file.
# This is macro that wraps a genrule:
ocaml_preproc(name="preproc",
              ppx=":ppx_pipeline",
              srcs=["hello_ppx.ml"])
# NOTE: we could also use a genrule to do the same thing:
# SRCS = ["hello_ppx.ml"]
# genrule(
#     name = "preproc",
#     message = "Preprocessing sources...",
#     tools = [":ppx_pipeline"],
#     srcs = SRCS,
#     outs = ["_pp_/{}".format(f) for f in SRCS],
#     cmd = "for f in $(SRCS);"
#     + " do"
#     + "    BNAME=`basename $$f`;"
#     + "    $(location :ppx_pipeline) $$f > $@;"
#     + " done"
# )

# Step 3: compile preprocessed source (":preproc") from step 2.
ocaml_binary(
    name = "ppx",
    message = "Compiling hello_ppx",
    srcs = [":preproc"],
    opts = [
        "-linkpkg",
        "-thread",  # avoid warning about possible linking problems
        # "-verbose"
    ],
    deps = ["@opam//pkg:core"],
    visibility = ["//visibility:public"],
)


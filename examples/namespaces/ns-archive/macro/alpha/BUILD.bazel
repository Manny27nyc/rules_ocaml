load("@obazl_rules_ocaml//ocaml:build.bzl",
     # macros
     "ocaml_ns_archive_macro",
     "ocaml_submodule_rename",
     # rules
     "ocaml_archive",
     "ocaml_binary",
     "ocaml_module",
)

package(default_visibility = ["//visibility:public"])

## Step 1: Generate ns_archive source files.
## This macro generates the ns_module files containing module aliases;
## it also renames the naming (implementation) modules
## e.g. alpha/gamma/howdy.ml => Alpha__Gamma__Howdy.ml
ocaml_ns_archive_macro(
    name = "ns_archive_srcs",
    # module_name = "foo",
    delegates = [
        "beta1/gamma/goodbye.ml",
        "beta2/gamma/hello.ml",
        "gamma/howdy.ml",
        "beta1/gamma/hello.ml"
    ],
)

## Step 2. Compile and archive the generated files.
ocaml_archive(
    name = "alpha",
    srcs = [":ns_archive_srcs"],
    opts = ["-w", "-49",
            "-linkall",
            "-no-alias-deps",
            "-opaque",
            "-verbose"]
)

## Step 3. Use the archive:
## $ bazel run namespaces/ns_archive/macro/alpha:test
ocaml_binary(
    name = "test",
    srcs = ["driver.ml"],
    opts = ["-linkall",
            "-w", "-49",
            # "-no-alias-deps",
            "-verbose"],
    deps = [":alpha"]
)

## without archive - depending on source files
ocaml_binary(
    name = "testx",
    srcs = [":ns_archive_srcs", "driver.ml"],
    opts = ["-linkall",
            "-w", "-49",
            "-no-alias-deps",
            "-verbose"],
)

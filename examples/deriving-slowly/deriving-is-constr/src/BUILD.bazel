load("@obazl//ocaml:build.bzl",
     "ocaml_binary",
     "ocaml_library",
     "ocaml_ppx_binary",
     "ocaml_ppx_library")

## Use the compiled metaquot preprocessor to transform our ppx source.
genrule(
    name = "preproc",
    message = "Preprocessing sources...",
    tools = ["//ppx:metaquot_ppx"], # <= see ../../ppx/BUILD.bazel
    srcs = ["deriving_is_constr.ml"],
    outs = ["deriving_is_constr.pp.ml"],
    ## NOTE: $(location foo), where 'foo' is a label, resolves to the
    ## path of the thing labeled, in this case the ppx executable.
    cmd = "$(location //ppx:metaquot_ppx)"
    + " --cookie 'library-name=\"deriving_is_constr\"'"
    + " -dump-ast"
    + " --impl $< > \"$@\";"
    # + " $< > \"$@\";"
)

# ocaml_ppx_library(
#     name = "deriving_is_constr_ppxlib",
#     visibility = ["//visibility:public"],
#     srcs = ["deriving_is_constr.ml"],
#     preprocessor = "//ppx:metaquot_ppx",
#     dump_ast = False,
#     deps = ["@opam//pkg:base",
#             "@opam//pkg:ppxlib"],
# )

ocaml_ppx_binary(
    name = "deriving_is_constr_ppx",
    visibility = ["//visibility:public"],
    copts = ["-linkall",
             "-predicates", "ppx_driver",
             # tell ocamlfind we want native libs:
             "-predicates", "native",
             # "-c",
             "-linkpkg",
             ## to produce a cmxa: -a
             # "-a"
    ],
    deps = ["@opam//pkg:base",
            "@opam//pkg:ppxlib",
            ":preproc",
    ]
)

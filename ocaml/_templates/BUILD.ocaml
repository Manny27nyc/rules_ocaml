load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "bool_setting",
     "string_flag",
     "string_list_flag",
     "string_setting")

load("@obazl_rules_ocaml//ocaml/_toolchains:ocaml_toolchains.bzl",
## FIXME: make a public toolchain ns
     "ocaml_toolchain")
load("@obazl_rules_ocaml//ocaml/_toolchains:sdk.bzl",
## FIXME: put these in public ocaml namespace
     "ocaml_sdkpath",
     "ocaml_register_toolchains")

## OCAML_VERSION = "4.07.1"
## OCAMLBUILD_VERSION = "0.14.0"
## OCAMLFIND_VERSION = "1.8.0"
## COMPILER_NAME = "ocaml-base-compiler.%s" % OCAML_VERSION

package(default_visibility = ["//visibility:public"])

# bool_flag( name = "debug", build_setting_default = True )
# bool_flag( name = "cmt", build_setting_default = False )
# bool_flag( name = "keep-locs", build_setting_default = True )
# # bool_flag( name = "linkstatic", build_setting_default = False )
# bool_flag( name = "noassert", build_setting_default = False )
# bool_flag( name = "opaque", build_setting_default = True )
# bool_flag( name = "short-paths", build_setting_default = True )
# bool_flag( name = "strict-formats", build_setting_default = True )
# bool_flag( name = "strict-sequence", build_setting_default = True )

exports_files(glob(["switch/bin/**"]))

platform(
    name = "bytecode",
    parents = ["@local_config_platform//:host"],
    constraint_values = [
        "@ocaml//mode:bytecode",
    ]
)

ocaml_sdkpath(
    name = "path",
    path = "{sdkpath}",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "csdk",
    srcs = glob(["csdk/*.a"]),
    hdrs = glob(["csdk/**/*.h"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "stublibs",
    srcs = glob(["switch/lib/stublibs/*.so"]),
    visibility = ["//visibility:public"],
)

# filegroup(
#     name = "base_stubs",
#     srcs = ["switch/lib/stublibs/dllbase_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "bigstringaf_stubs",
#     srcs = ["switch/lib/stublibs/dllbigstringaf_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "bin_prot_stubs",
#     srcs = ["switch/lib/stublibs/dllbin_prot_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "core_stubs",
#     srcs = ["switch/lib/stublibs/dllcore_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "expect_test_collector_stubs",
#     srcs = ["switch/lib/stublibs/dllexpect_test_collector_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "re2_c_stubs",
#     srcs = ["switch/lib/stublibs/dllre2_c_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "re2_stubs",
#     srcs = ["switch/lib/stublibs/dllre2_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "spawn_stubs",
#     srcs = ["switch/lib/stublibs/dllspawn_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "time_now_stubs",
#     srcs = ["switch/lib/stublibs/dlltime_now_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "base_bigstring_stubs",
#     srcs = ["switch/lib/stublibs/dllbase_bigstring_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "core_kernel_stubs",
#     srcs = ["switch/lib/stublibs/dllcore_kernel_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "integers_stubs",
#     srcs = ["switch/lib/stublibs/dllintegers_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "ctypes_stubs",
#     srcs = ["switch/lib/stublibs/dllctypes_stubs.so"],
#     visibility = ["//visibility:public"],
# )

# filegroup(
#     name = "ctypes-foreign-base_stubs",
#     srcs = ["switch/lib/stublibs/dllctypes-foreign-base_stubs.so"],
#     visibility = ["//visibility:public"],
# )

filegroup(
    name = "bin",
    srcs = glob(["switch/bin/*"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "cppo",
    srcs = ["switch/bin/cppo"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ocaml-crunch",
    srcs = ["switch/bin/ocaml-crunch"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ocamlc",
    srcs = ["switch/bin/ocamlc"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ocamlopt",
    srcs = ["switch/bin/ocamlopt"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "ocamlfind",
    srcs = ["switch/bin/ocamlfind"],
    visibility = ["//visibility:public"],
)

## filegroup(
##     name = "ocamlbuild",
##     srcs = ["switch/bin/ocamlbuild"],
##     visibility = ["//visibility:public"],
## )

## filegroup(
##     name = "ocamldep",
##     srcs = ["switch/bin/ocamldep"],
##     visibility = ["//visibility:public"],
## )

## filegroup(
##     name = "files",
##     srcs = glob([
##         "switch/bin/ocaml*",
##         "src/**",
##         "pkg/**",
##     ]),
## )

################################################################
ocaml_toolchain(
    name = "ocaml_toolchaininfo_native_provider_linux",
    linkmode = "static",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "ocaml_toolchain_native_linux",
    toolchain_type = "@obazl_rules_ocaml//ocaml:toolchain",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        # "@ocaml//mode:native"
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        # "@ocaml//mode:native"
    ],
    # target_compatible_with = constraints,
    toolchain = ":ocaml_toolchaininfo_native_provider_linux"
)

################################################################
# ocaml_toolchain(
#     name = "ocaml_toolchaininfo_bytecode_provider_linux",
#     linkmode = "static",
#     # mode = "bytecode",
#     visibility = ["//visibility:public"],
# )

# toolchain(
#     name = "ocaml_toolchain_bytecode_linux",
#     toolchain_type = "@obazl_rules_ocaml//ocaml:toolchain",
#     exec_compatible_with = [
#         "@platforms//os:linux",
#         # "@platforms//cpu:x86_64",
#         # "@ocaml//mode:bytecode"
#     ],
#     target_compatible_with = [
#         "@platforms//os:linux",
#         # "@platforms//cpu:x86_64",
#         # "@ocaml//mode:bytecode"
#     ],
#     # target_compatible_with = constraints,
#     toolchain = ":ocaml_toolchaininfo_bytecode_provider_linux"
# )

################################################################
## we use same toolchain for native and bytecode modes
## rule logic selects the compiler based on @ocaml//mode config flag
ocaml_toolchain(
    name = "ocaml_toolchaininfo_native_provider_macos",
    # mode = "native",
    linkmode = "dynamic",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "ocaml_toolchain_native_macos",
    toolchain_type = "@obazl_rules_ocaml//ocaml:toolchain",
    exec_compatible_with = [
        "@platforms//os:macos",
        # "@platforms//cpu:x86_64",
        # "@ocaml//mode:native"
    ],
    target_compatible_with = [
        "@platforms//os:macos",
        # "@platforms//cpu:x86_64",
        # "@ocaml//mode:native"
    ],
    # target_compatible_with = constraints,
    toolchain = ":ocaml_toolchaininfo_native_provider_macos"
)

################################################################
# ocaml_toolchain(
#     name = "ocaml_toolchaininfo_bytecode_provider_macos",
#     linkmode = "dynamic",
#     mode = "bytecode",
#     visibility = ["//visibility:public"],
# )

# toolchain(
#     name = "ocaml_toolchain_bytecode_macos",
#     toolchain_type = "@obazl_rules_ocaml//ocaml:toolchain",
#     exec_compatible_with = [
#         "@platforms//os:macos",
#         # "@platforms//cpu:x86_64",
#         "@ocaml//mode:bytecode"
#     ],
#     target_compatible_with = [
#         "@platforms//os:macos",
#         # "@platforms//cpu:x86_64",
#         "@ocaml//mode:bytecode"
#     ],
#     # target_compatible_with = constraints,
#     toolchain = ":ocaml_toolchaininfo_bytecode_provider_macos"
# )

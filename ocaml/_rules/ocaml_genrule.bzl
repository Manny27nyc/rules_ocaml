#####################
def impl_genrule(ctx):

    debug = False
    if ctx.label.name in ["remove_snark_keys_trigger"]:
        debug = True

    if debug:
        print("")
        print("Start: OCAML_GENRULE %s" % ctx.label)

    tools = ctx.files.tools

    outputs = []

    if ctx.outputs.out:
        outputs.append(ctx.outputs.out)
    if ctx.outputs.outs:
        for o in ctx.outputs.outs:
            outputs.append(o)

    cmd = ctx.expand_location(ctx.attr.cmd)
    ## ctx.expand_make_variables deprecated, use ctx.var instead
    # gendir = ctx.var["GENDIR"]
    # if len(outputs) > 0:
    #     cmd = cmd.replace("$(GENDIR)", gendir)

    if debug:
        print("TOOLS: %s" % tools)
        print("raw CMD: %s" % ctx.attr.cmd)
        print("munged CMD: %s" % cmd)
        print("OUTPUTS: %s" % outputs)

    ctx.actions.run_shell(
        inputs   = ctx.files.srcs,
        outputs  = outputs,
        tools    = tools,
        command  = cmd,
        mnemonic = "OCamlGenrule",
        progress_message = "{rule}: {ws}//{pkg}:{tgt}".format(
            rule=ctx.attr._rule,
            ws  = ctx.label.workspace_name if ctx.label.workspace_name else ctx.workspace_name,
            pkg = ctx.label.package,
            tgt=ctx.label.name,
        )
    )

    return DefaultInfo(
        files = depset(
            direct = outputs
        )
    )

####################
ocaml_genrule = rule(
    implementation = impl_genrule,
    doc = """Functional equivalent of native 'genrule', except that it supports Bazel transitions on the tools.  Use this instead of native 'genrule' if your tools are ocaml/ppx executables.

    """,
    attrs = dict(
        srcs = attr.label_list(
            doc = """A list of inputs for this rule, such as source files to process.
Do not list tools executed by the cmd here; use the tools attribute instead.
            """
        ),
        out  = attr.output(
            doc = "Experimental.",
            # mandatory = True
        ),
        # outs = attr.string_list(
        outs = attr.output_list(
            doc = """List of filenames; required; nonconfigurable

A list of files generated by this rule.
Output files must not cross package boundaries. Output filenames are interpreted as relative to the package.
            """,
            mandatory = True
        ),
        cmd = attr.string(
            doc = "The command to run. Subject to $(location) and \"Make\" variable substitution. Use $(GENDIR) as output dir.",
            mandatory = True,
        ),
        tools = attr.label_list(
            doc = """List of labels; optional

A list of tool dependencies for this rule.
            """,
            cfg = "exec",
            mandatory = True
            ),
        _rule = attr.string( default = "ocaml_genrule" ),
    ),
    incompatible_use_toolchain_transition = True,
)
